name: Build & Deploy ESP32 OTA (AppServ/Windows)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.ver.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Arduino CLI
        uses: arduino/setup-arduino-cli@v2

      - name: Install ESP32 core
        run: |
          set -euxo pipefail
          arduino-cli config init
          arduino-cli core update-index
          arduino-cli core install esp32:esp32@3.0.7

      - name: Install libraries
        run: |
          set -euxo pipefail
          arduino-cli lib update-index
          arduino-cli lib install "WiFiManager" "ArduinoJson" "ModbusMaster" "LoRa"

      # อ่านเวอร์ชันจาก Send/Send.ino
      - name: Extract firmware version
        id: ver
        run: |
          set -euo pipefail
          FILE="Send/Send.ino"
          [ -f "$FILE" ] || { echo "File not found: $FILE"; ls -R; exit 1; }
          VER=$(grep -oE '#define[[:space:]]+CURRENT_VERSION[[:space:]]+"[^"]+"' "$FILE" | sed -E 's/.*"([^"]+)".*/\1/')
          VER=$(printf "%s" "$VER" | tr -d '\r\n ' | sed -E 's/^[vV]//; s/[.]+$//')
          [ -n "$VER" ] || { echo "Version not found in $FILE"; exit 1; }
          echo "version=$VER" >> "$GITHUB_OUTPUT"
          echo "Detected version: $VER"

      - name: Compile firmware
        run: |
          set -euxo pipefail
          mkdir -p build
          # ปรับ FQBN ให้ตรงรุ่นบอร์ดถ้าจำเป็น
          arduino-cli compile \
            --fqbn esp32:esp32:esp32 \
            --build-path build \
            --export-binaries \
            --warnings default \
            Send
          ls -lah build

      - name: Prepare artifacts
        run: |
          set -euo pipefail
          BIN=$(ls -1t build/*.ino.bin 2>/dev/null | head -n1 || true)
          [ -n "$BIN" ] || { echo "No sketch .ino.bin produced!"; exit 1; }
          cp "$BIN" "firmware_v${{ steps.ver.outputs.version }}.bin"
          cp "firmware_v${{ steps.ver.outputs.version }}.bin" firmware.bin

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware_v${{ steps.ver.outputs.version }}
          path: |
            firmware.bin
            firmware_v${{ steps.ver.outputs.version }}.bin

 deploy:
  needs: build
  runs-on: [self-hosted, Windows]
  # เลือก 1 ใน 3 วิธีตั้งค่า BASE URL:
  # 1) ถ้ามี Repository Variable → ใช้บรรทัด env ด้านล่างนี้ (พร้อม fallback):
  env:
    APPSERV_BASE_URL: ${{ vars.APPSERV_BASE_URL || 'http://172.20.10.7' }}
  # 2) ถ้าใช้ Environment (ชื่อ appserv) ให้ใส่:
  # environment: appserv
  # และคง env ด้านบนไว้ก็ได้ (เผื่อเป็น fallback)

  steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: firmware_v${{ needs.build.outputs.version }}

    - name: Make version.json for AppServ (CMD)
      shell: cmd
      run: |
        @echo off
        setlocal enabledelayedexpansion

        if "%APPSERV_BASE_URL%"=="" (
          echo APPSERV_BASE_URL is empty. Set a repo Variable or edit env fallback.
          exit /b 1
        )

        set "BASE=%APPSERV_BASE_URL%"
        if "%BASE:~-1%"=="/" set "BASE=%BASE:~0,-1%"

        rem SHA256
        set "SHA="
        for /f "skip=1 tokens=* delims=" %%L in ('certutil -hashfile firmware.bin SHA256 ^| findstr /v /c:"hash of" ^| findstr /v /c:"CertUtil"') do set "SHA=%%L"
        if not defined SHA ( echo Cannot compute SHA256 & exit /b 1 )
        set "SHA=%SHA: =%"

        rem Size
        for %%A in (firmware.bin) do set "SIZE=%%~zA"

        rem UTC time
        for /f %%I in ('powershell -NoProfile -Command "[DateTime]::UtcNow.ToString(\"s\") + \"Z\""') do set "BUILD=%%I"

        >version.json echo {^
        "version":"${{ needs.build.outputs.version }}",^
        "url":"%BASE%/firmware.bin",^
        "sha256":"%SHA%",^
        "size_bytes":%SIZE%,^
        "build_time_utc":"%BUILD%"^
        }
        type version.json

    - name: Copy to AppServ www (CMD)
      shell: cmd
      env:
        TARGET_DIR: C:\AppServ\www
      run: |
        @echo off
        if not exist "%TARGET_DIR%" mkdir "%TARGET_DIR%"
        copy /Y firmware.bin "%TARGET_DIR%\firmware.bin" >NUL
        copy /Y version.json "%TARGET_DIR%\version.json" >NUL
        copy /Y "firmware_v${{ needs.build.outputs.version }}.bin" "%TARGET_DIR%\firmware_v${{ needs.build.outputs.version }}.bin" >NUL
        echo Deployed to %TARGET_DIR%
        echo URLS:
        echo   %APPSERV_BASE_URL%/firmware.bin
        echo   %APPSERV_BASE_URL%/version.json
